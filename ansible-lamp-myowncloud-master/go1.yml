---
# Deploy localhost
- name: run the playbook tasks on the localhost
  hosts: 127.0.0.1
  connection: local
  remote_user: root
  
  vars:
    containers:
       - { name: blcr, ip: 192.168.34.11, volumes: "/media /pi/Disco/pi/blcr:/etc/", ports: none }
       - { name: wsrv1, ip: 192,168,34,12, volumes: /media/pi/Disco/pi/wsrv1:/etc/, ports: "- 80" }
       - { name: wsrv2, ip: 192.168.34.13, volumes: /media/pi/Disco/pi/wsrv2:/etc/, ports: "- 80" }
       - { name: dbsrv, ip: 192.168.34.14 volumes: /media/pi/Disco/pi/dbsrv:/etc/, ports: none }
    network_containers: rapspinet
    subnet_containers: 192.168.34.0/24
    gateway_containers: 192.168.34.1
    image_containers: ssh
    dockerfile_containers: dfssh
    dockerfile_path: /home/pi/ansible-lamp-myowncloud-master/dockerfiles


  
  tasks:

# install pip 
     - name: Install pip
       apt: 
            name: python-pip 
            state: present

     - name: install docker-py package
       pip: 
            name: docker-py

# create images
     - name: Build Docker image from Dockerfile
       docker_image:
          name: "{{ image_containers }}"
          dockerfile: "{{ dockerfile_containers }}"
          path: "{{ dockerfile_path }}"
          state: present

# delete network
     - name: Be sure that network is deleted
       docker_network:
         name: "{{ network_containers }}"
         state: absent
         force: yes
# create network
     - name: Create a network with custom IPAM config
       docker_network:
         name: "{{ network_containers }}"
         ipam_options:
           subnet: "{{ subnet_containers" }}
           gateway: "{{ network_gateway" }}"

# run containers
     - name: Running the containers
       docker_container:
           name: "{{ item }}"
           image: "{{ image_containers }}"
           networks:
              - name: "{{ containers.name }}"
                ipv4_address: "{{ containers.ip }} 
           volumes: "{{ containers.volumes }}"
           state: started
           exposed_ports: "{{ ports_containers }}"
        with_items: "{{ containers }}"

# Configures containers as known hosts for ssh
     - name: For each hosts genenerate and add ssh knownhost
       command: "ssh-keygen -f /root/.ssh/known_hosts -R {{ item }}"
       with_items: "{{ groups['all'] }}"
 
# Deploy dockers
- name: deploy loadbalancers
  include: loadbalancers.yml

- name: deploy webservers
  include: webservers.yml

- name: deploy dbservers
  include: dbservers.yml


